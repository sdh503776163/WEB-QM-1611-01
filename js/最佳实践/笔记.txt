最佳实践
	1.可维护性
		1.1	可理解性
			其他人可以接手代码并理解它的意图和一般用途
		1.2	直观性
			代码中的东西一看就能明白，不管其操作过程多么复杂
		1.3	可适应性
			代码以一种数据上的变化而不需要重写的方式编写
		1.4	可扩展性
			在代码架构上已经考虑到未来允许对核心功能进行扩展
		1.5	可调式性
			当有地方出错是，代码可以给予你足够的错误信息来确定问题所在

	2.代码约定
		2.1	可读性
			要让代码可维护，首先它必须可读。可读性的大部分内容都是和代码缩进相关的。一种很不错的、很常见的就是4个空格（使用tab键实现）。
			2.1.1	函数和方法
				每个函数或者方法都应该包含一个注释，描述其目的和完成任务所可能使用的算法。陈述事先的假设也非常重要，如参数代表什么，函数是否有返回值。
			2.1.2	大段代码
				用于完成单个任务的多行代码应该在前面放一个描述任务的注释
			2.1.3	复杂的算法
				如果使用了一种独特的方式解决某个问题，则需要在注释中解释你是如何做的。

		2.2	变量和函数命名
			适当给变量和函数起名字来增加代码可理解性和可维护性是非常重要的。
				2.2.1	变量名应为名词
				2.2.2	函数名应该以动词开始。
				2.2.3	变量和函数都应使用合乎逻辑的名字，不要担心长度。

		2.3	变量类型透明
			由于JS中变量是松散类型，所以很容易忘记变量所应包含的数据类型。
				2.3.1	初始化变量
					初始化一个特定的数据可以很好的指明变量的类型，但缺点是它无法用于函数声明中的函数参数

	3.	松散耦合
		3.1	解耦HTML/JS
		3.2	解耦CSS/JS
		3.3 解耦应用逻辑/事件处理程序




