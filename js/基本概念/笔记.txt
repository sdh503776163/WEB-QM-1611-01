语法：
	ES大量借鉴C以及类C语言的语法(java、perl)

	区分大小写：
		ES中的一切严格区分大小写(变量、函数名、操作符)

	标识符：
		变量、函数、属性的名字，或者函数的参数
		格式：
			第一个字符必须是字母、下划线(_)、美元符号($)开始
			其他字符可以是字母、下划线(_)、美元符号($)、数字
			推荐使用驼峰命名法(第一个单词字母小写，剩余单词首字母大写)

	语句：
		每句代码以分号结尾，如果省略分号，编译器会自动判断语句结尾(按照w3c标准，建议加上分号)

关键字和保留字
	ECMA-262 描述了一组特殊用途的关键字，这些关键字可用于表示控制语句的开始和结束，或者用于执行特定操作等。按照规定，关键字是语句保留的，不能用于标识符

	ECMA-262 还描述了一组也是不能用于标识符的保留字(部分保留字目前还没有具体用途，但是在将来可能会被用作关键字)

变量：
	JS的变量是松散类型(弱类型),也就是每个变量仅仅是一个用来保存值的占位符，可以用来存储任何类型的数据

数据类型：
	基本类型：Undefined、Null、Boolean、Number、String
	复杂类型：Object

	typeof操作符
		用于检测数据类型，它会返回一个string类型的返回值

	Undefined类型:
		申明一个变量未赋值时变量的初始值为undefined
	Null类型：
		值为null，null值表示空对象指针，所以通过typeof检测null类型的变量将会得到一个object类型
	Boolean类型：
		值为true和false
	Number类型：
		值为各种数值类型包括整数、浮点数、NaN(非数值)
		NaN是一种特殊的数值类型
		数值转换：
			parseInt();		转整数
			parseFloat();	转浮点数
			Number();		转数值
			isNaN();		检测数字
	string类型:
		字符串可以由单引号和双引号表示
		字符字面量：
			\n 		换行
			\r		回车
			\'		单引号
			\"		双引号
		转换字符串
			通过str.toString()方法将数据转换为string类型
	Object类型：
		一组数据和功能的集合

操作符：
	包括算数操作符、位操作符、关系操作符、相等操作符
	一元操作符：
		只能操作一个值
			递增和递减操作符
				i++\++i
				i--\--i
			一元加和减操作符
		布尔操作符
			与或非
			&&||！
		乘性操作符
		加性操作符
		关系操作符
			<,>,<=,>=,
		相等操作符
			相等和不相等
				!=,==
			全等和不全等
				===,!==
		条件操作符(三目运算符)
			(num1>num2)?num1:num2;
			(判断条件)?为真执行语句:为假执行语句;
		赋值操作符
			等号(=),把右侧的值付给左侧的值
			*=，/=，+=，-=，%=
		逗号操作符
			var num1,num2,num3;

语句：
	if语句
		if(判断条件){
			执行语句1
		}else{
			执行语句2
		}

		业界内普遍推崇的最佳实践始终是使用代码块，即使要执行的只有一行代码。因为这样可以消除人们的误解，否则可能让人分不清在不同条件下执行哪些语句。

	switch语句
		switch语句与if语句的关系最为密切，也是其他语言中普遍使用的一种流程控制语句。

		switch(表达式){
			case value:
				执行语句1
				break;
			case value:
				执行语句2
				break;
			case value:
				执行语句3
				break;
			default:执行语句4
		}

		switch语句中的每一种情形(case)的含义是：“如果表达式等于这个值(value)，则执行后面的语句”。而break关键字会导致代码执行流跳出switch语句。如果省略break关键字，会导致执行完当前case后，继续执行下一个case。最后default关键字则用于在表达式不匹配前面任何一种case的时候，执行机动代码（因此，也相当于一个else语句）。

		可以在switch语句中使用任何数据类型，其次，每个case的值不一定是常量，可以是变量，甚至是表达式。

		注意：switch语句在比较值时使用的是全等操作符，因此不会发生类型转换。

	浏览器三种弹框
		alert();
			提示框，没有返回值
		confirm();
			确认提示框，有返回值。确定返回true，取消返回false
		prompt();
			输入提示框，有返回值。取消返回null，确定返回一个string类型的值

	for语句
		for语句是一种前测试循环语句，但它具有在执行循环之前初始化变量和定义循环后要执行的代码的能力。

			for(初始化变量;判断语句;步进值){
				执行语句
			}

		在for循环的变量初始化表达式中，可以不适用var关键之，该变量的初始化可以在外部执行。
		由于在ES中不存在块级作用域，因此循环内部定义的变量也可以在外部访问到。

	while语句
		while语句同样也是属于前测试循环语句，也就是说，在循环体内的代码被执行之前，就会对出口条件求值。因此，循环体内的语句有可能永远不会被执行。

			while(判断条件){
				执行语句
			}

	do-while语句
		do-while语句是一种后测试循环语句，即只有在循环体中的代码被执行之后，才会测试出口条件。在对条件表达式求值之前，循环体内的代码至少会被执行一次。

			do{
				执行代码
			}while(判断条件)

	注意：while和do-while的区别，前者先判断后执行，有可能一次都不执行。后者先执行后判断，至少执行一次。

	break和continue语句
		break和continue语句用于在循环中精确地控制代码的执行。其中break语句立即退出循环，强制继续执行循环后面的语句。而continue语句只是中断本次循环，直接进入下一次循环




制作文档，内容为总结昨天和今天学习内容
	剖析知识点，列举案例